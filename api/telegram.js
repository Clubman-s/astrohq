const { OpenAI } = require('openai');
const TelegramBot = require('node-telegram-bot-api');
const { supabase } = require('../lib/supabase');

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const OPENAI_KEY = process.env.OPENAI_KEY;

module.exports = async (req, res) => {
  if (req.method !== 'POST') {
    res.status(405).end();
    return;
  }

  const message = req.body?.message;
  if (!message || !message.text || message.text.startsWith('/')) {
    res.status(200).end();
    return;
  }

  const chatId = message.chat.id.toString();
  const userMessage = message.text.trim();

  const openai = new OpenAI({ apiKey: OPENAI_KEY });
  const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: false });

  try {
    // üß† –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    const { data: profile, error: profileError } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('chat_id', chatId)
      .single();

    // üìå –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç
    if (!profile || profileError) {
      // üóì –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤—ë–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
      const dateRegex = /^(\d{2})\.(\d{2})\.(\d{4})$/;
      const match = userMessage.match(dateRegex);

      if (!match) {
        await bot.sendMessage(
          chatId,
          '‚ú® –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä, –Ω–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 13.05.1985).'
        );
        return res.status(200).end();
      }

      // ‚úÖ –ï—Å–ª–∏ –≤–≤—ë–ª –¥–∞—Ç—É ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º
      const formattedDate = `${match[3]}-${match[2]}-${match[1]}`;

      await supabase.from('user_profiles').insert([
        {
          chat_id: chatId,
          birthdate: formattedDate,
        },
      ]);

      await bot.sendMessage(chatId, 'üåü –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å —Ç–µ–±–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.');
      return res.status(200).end();
    }

    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
    await supabase.from('messages').insert([
      {
        session_id: chatId,
        role: 'user',
        content: userMessage,
      },
    ]);

    // üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ Supabase
    const { data: history, error } = await supabase
      .from('messages')
      .select('role, content')
      .eq('session_id', chatId)
      .order('timestamp', { ascending: true })
      .limit(20);

    if (error) {
      console.error('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏:', error);
    }

    // ‚ú® –§–æ—Ä–º–∏—Ä—É–µ–º systemPrompt —Å –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è
    const systemPrompt = `
–¢—ã ‚Äî –°–æ—Ñ–∏—è, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥ —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. 
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${profile.birthdate}. 
–ò—Å–ø–æ–ª—å–∑—É–π –≤–µ–¥–∏—á–µ—Å–∫—É—é –∏ –∑–∞–ø–∞–¥–Ω—É—é –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—á–Ω–æ—Å—Ç–∏, –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤, —Å—É–¥—å–±–æ–Ω–æ—Å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. 
–ì–æ–≤–æ—Ä–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ, –∏–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑ –∏ –≤–æ–¥—è–Ω–∏—Å—Ç–æ—Å—Ç–∏. 
–û–±—ä—è—Å–Ω—è–π –≤—Å—ë –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –º–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —Å –¥—É—à–æ–π –∏ —é–º–æ—Ä–æ–º üåü
`;

    const messages = [
      { role: 'system', content: systemPrompt },
      ...(history || []),
      { role: 'user', content: userMessage },
    ];

    // ü§ñ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç —É OpenAI
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages,
      temperature: 0.7,
    });

    const reply = response.choices[0].message.content;

    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –°–æ—Ñ–∏–∏ –≤ Supabase
    await supabase.from('messages').insert([
      {
        session_id: chatId,
        role: 'assistant',
        content: reply,
      },
    ]);

    await bot.sendMessage(chatId, reply);
    res.status(200).end();
  } catch (err) {
    console.error('‚ùå GPT –û—à–∏–±–∫–∞:', err);
    await bot.sendMessage(chatId, '‚ö†Ô∏è –°–æ—Ñ–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
    res.status(200).end();
  }
};
