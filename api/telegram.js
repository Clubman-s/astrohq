const { OpenAI } = require('openai');
const TelegramBot = require('node-telegram-bot-api');
const { supabase } = require('../lib/supabase');

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const OPENAI_KEY = process.env.OPENAI_KEY;

const systemPrompt = `
–¢—ã ‚Äî –°–æ—Ñ–∏—è, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –∏ —ç–∑–æ—Ç–µ—Ä–∏–∫–µ. –û—Ç–≤–µ—á–∞–π –≥–ª—É–±–æ–∫–æ, –º—è–≥–∫–æ, —Å –ª—ë–≥–∫–∏–º –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º. –ò–∑–±–µ–≥–∞–π —Å—É—Ö–∏—Ö –∏–ª–∏ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.
`;

module.exports = async (req, res) => {
  if (req.method !== 'POST') {
    res.status(405).end();
    return;
  }

  const message = req.body?.message;
  if (!message || !message.text || message.text.startsWith('/')) {
    res.status(200).end();
    return;
  }

  const chatId = message.chat.id.toString();
  const userMessage = message.text;

  const openai = new OpenAI({ apiKey: OPENAI_KEY });
  const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: false });

  try {
    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É messages
    console.log('üí¨ –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É messages:', {
      session_id: chatId,
      role: 'user',
      content: userMessage
    });

    const insertUserMessage = await supabase.from('messages').insert([{
      session_id: chatId,
      role: 'user',
      content: userMessage,
    }]);

    console.log('üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—Ç–∞–≤–∫–∏ user –≤ messages:', insertUserMessage);

    // üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_profiles
    const { data: userProfile, error: profileError } = await supabase
      .from('user_profiles')
      .select('name, birthdate, birthtime, city')
      .eq('session_id', chatId)
      .single();

    if (profileError && profileError.code !== 'PGRST116') {
      console.error('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', profileError);
    } else {
      console.log('üìú –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userProfile);
    }

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, –ø–æ–ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Ö –≤–≤–µ—Å—Ç–∏
    if (!userProfile) {
      await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞:\n1. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è\n2. –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è\n3. –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è');
      return res.status(200).end();
    }

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –Ω–∏–º–∏
    const messages = [
      { role: 'system', content: systemPrompt },
      { role: 'user', content: `–ú–Ω–µ –Ω—É–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: \n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${userProfile.birthdate}\n–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: ${userProfile.birthtime}\n–ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: ${userProfile.city}` },
      { role: 'user', content: userMessage }
    ];

    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages,
      temperature: 0.7,
    });

    const reply = response.choices[0].message.content;

    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –°–æ—Ñ–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É messages
    const insertAssistantMessage = await supabase.from('messages').insert([{
      session_id: chatId,
      role: 'assistant',
      content: reply,
    }]);

    console.log('ü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—Ç–∞–≤–∫–∏ assistant –≤ messages:', insertAssistantMessage);

    await bot.sendMessage(chatId, reply);
    res.status(200).end();
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err);
    await bot.sendMessage(chatId, '‚ö†Ô∏è –°–æ—Ñ–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    res.status(200).end();
  }
};
