const { OpenAI } = require('openai');
const TelegramBot = require('node-telegram-bot-api');
const { supabase } = require('../lib/supabase');

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const OPENAI_KEY = process.env.OPENAI_KEY;

const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: false });

// –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const initialPrompt = `
–ü—Ä–∏–≤–µ—Ç! üòä –Ø ‚Äî –°–æ—Ñ–∏—è, –∞—Å—Ç—Ä–æ–ª–æ–≥ –∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –ø–æ —Ç–∞–π–Ω–∞–º —Ç–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è.
–ß—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏:

1. üìÖ –î–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)
2. ‚è∞ –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –∑–Ω–∞–µ—à—å)
3. üåç –ì–æ—Ä–æ–¥ –∏–ª–∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è

–ö–∞–∫ —Ç–æ–ª—å–∫–æ –±—É–¥—É—Ç –¥–∞–Ω–Ω—ã–µ ‚Äî —Å—Ä–∞–∑—É –ø—Ä–∏—Å—Ç—É–ø–∏–º! üîÆ
`;

function isValidDate(dateStr) {
  return /\d{2}\.\d{2}\.\d{4}/.test(dateStr);
}

module.exports = async (req, res) => {
  if (req.method !== 'POST') {
    res.status(405).end();
    return;
  }

  const message = req.body?.message;
  if (!message || !message.text || message.text.startsWith('/')) {
    res.status(200).end();
    return;
  }

  const chatId = message.chat.id.toString();
  const userMessage = message.text.trim();

  const openai = new OpenAI({ apiKey: OPENAI_KEY });

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: profiles } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('session_id', chatId)
      .limit(1);

    const profile = profiles?.[0];

    // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!profile) {
      let birthdateMatch = userMessage.match(/\d{2}\.\d{2}\.\d{4}/);
      let timeMatch = userMessage.match(/\b(\d{1,2}:\d{2})\b/);
      let placeMatch = userMessage.match(/(?:\d{2}\.\d{2}\.\d{4}|\d{1,2}:\d{2})\s*(.*?)$/);

      if (birthdateMatch) {
        const birthdate = birthdateMatch[0];
        const birthtime = timeMatch ? timeMatch[0] : null;
        const birthplace = placeMatch ? placeMatch[1].trim() : null;

        await supabase.from('user_profiles').insert([
          {
            session_id: chatId,
            birthdate,
            birthtime,
            birthplace
          }
        ]);

        await bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ, –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã ‚úÖ. –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å–º–æ—Ç—Ä—é, —á—Ç–æ –∑–≤–µ–∑–¥—ã –≥–æ–≤–æ—Ä—è—Ç –æ–± —ç—Ç–æ–º. ‚ú®');
        res.status(200).end();
        return;
      } else {
        await bot.sendMessage(chatId, initialPrompt);
        res.status(200).end();
        return;
      }
    }

    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
    await supabase.from('messages').insert([
      {
        session_id: chatId,
        role: 'user',
        content: userMessage,
      }
    ]);

    // üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ Supabase
    const { data: history } = await supabase
      .from('messages')
      .select('role, content')
      .eq('session_id', chatId)
      .order('timestamp', { ascending: true })
      .limit(20);

    const systemPrompt = `
–¢—ã ‚Äî –°–æ—Ñ–∏—è, –¥—É—Ö–æ–≤–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥ –∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${profile.birthdate}
- –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: ${profile.birthtime || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
- –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: ${profile.birthplace || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}

–û—Ç–≤–µ—á–∞–π –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–Ω–æ, –≥–ª—É–±–æ–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É. –ò–∑–±–µ–≥–∞–π –±–∞–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏ –æ–±—â–∏—Ö —Ñ—Ä–∞–∑. –¢—ã —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—à—å –∏—Å—Ç–∏–Ω—É —á–µ—Ä–µ–∑ –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É.
`;

    const messages = [
      { role: 'system', content: systemPrompt },
      ...(history || []),
      { role: 'user', content: userMessage }
    ];

    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages,
      temperature: 0.8,
    });

    const reply = response.choices[0].message.content;

    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –°–æ—Ñ–∏–∏ –≤ Supabase
    await supabase.from('messages').insert([
      {
        session_id: chatId,
        role: 'assistant',
        content: reply,
      }
    ]);

    await bot.sendMessage(chatId, reply);
    res.status(200).end();
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err);
    await bot.sendMessage(chatId, '‚ö†Ô∏è –°–æ—Ñ–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    res.status(200).end();
  }
};
