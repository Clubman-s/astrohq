const { OpenAI } = require('openai');
const TelegramBot = require('node-telegram-bot-api');
const { supabase } = require('../lib/supabase');

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const OPENAI_KEY = process.env.OPENAI_KEY;

const systemPrompt = `–¢—ã ‚Äî –°–æ—Ñ–∏—è, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –∏ —ç–∑–æ—Ç–µ—Ä–∏–∫–µ. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≥–ª—É–±–æ–∫–æ, –º—è–≥–∫–æ, —Å –ª—ë–≥–∫–∏–º –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º. –ò–∑–±–µ–≥–∞–π —Å—É—Ö–∏—Ö –∏–ª–∏ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. 
–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ) –∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞.`;

module.exports = async (req, res) => {
  if (req.method !== 'POST') {
    res.status(405).end();
    return;
  }

  const message = req.body?.message;
  if (!message || !message.text || message.text.startsWith('/')) {
    res.status(200).end();
    return;
  }

  const chatId = message.chat.id.toString();
  const userMessage = message.text;

  const openai = new OpenAI({ apiKey: OPENAI_KEY });
  const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: false });

  try {
    await supabase.from('messages').insert([{
      session_id: chatId,
      role: 'user',
      content: userMessage,
    }]);

    const { data: existingProfile } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('session_id', chatId)
      .single();

    const { data: history } = await supabase
      .from('messages')
      .select('role, content')
      .eq('session_id', chatId)
      .order('timestamp', { ascending: true });

    const lastBotMessage = [...history].reverse().find(m => m.role === 'bot')?.content || '';
    const isAskingTopic = lastBotMessage.startsWith('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –°–æ—Ñ–∏—è, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏. –ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É');
    const isAskingData = lastBotMessage.includes('–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ');

    if (!existingProfile) {
      if (!isAskingTopic && !isAskingData) {
        const reply = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –°–æ—Ñ–∏—è, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏. –ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑?
        1. –°–µ–º—å—è –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
        2. –ó–¥–æ—Ä–æ–≤—å–µ
        3. –§–∏–Ω–∞–Ω—Å—ã
        4. –ö–∞—Ä—å–µ—Ä–∞
        5. –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç`;

        await supabase.from('messages').insert([{
          session_id: chatId,
          role: 'bot',
          content: reply,
        }]);
        await bot.sendMessage(chatId, reply);
      }
      else if (isAskingTopic && ['1', '2', '3', '4', '5'].includes(userMessage.trim())) {
        const reply = `–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ:
        1. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)
        2. –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ)
        3. –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è`;

        await supabase.from('messages').insert([{
          session_id: chatId,
          role: 'bot',
          content: reply,
        }]);
        await bot.sendMessage(chatId, reply);
      }
      else if (isAskingData) {
        const birthdateMatch = userMessage.match(/\d{2}\.\d{2}\.\d{4}/);
        if (birthdateMatch) {
          const birthdate = birthdateMatch[0];
          const [day, month, year] = birthdate.split('.');
          const formattedDate = `${year}-${month}-${day}`;

          let birthtime = "12:00";
          const timeMatch = userMessage.match(/(\d{1,2})(?::(\d{2}))?(?:\s*(—É—Ç—Ä–∞|–≤–µ—á–µ—Ä–∞|—á–∞—Å–æ–≤|—á–∞—Å–∞)?)?/);
          if (timeMatch) {
            let hours = parseInt(timeMatch[1]);
            const minutes = timeMatch[2] ? timeMatch[2] : "00";
            if (timeMatch[3]?.includes('–≤–µ—á–µ—Ä–∞') && hours < 12) hours += 12;
            birthtime = `${hours.toString().padStart(2, '0')}:${minutes}`;
          }

          let city = "–ú–æ—Å–∫–≤–∞";
          const cityMatch = userMessage.match(/–º–µ—Å—Ç–æ[:\s]*([^\d]+)/i) ||
                            userMessage.match(/–≥–æ—Ä–æ–¥[:\s]*([^\d]+)/i);
          if (cityMatch) city = cityMatch[1].trim();

          await supabase.from('user_profiles').upsert([{
            session_id: chatId,
            birthdate: formattedDate,
            birthtime,
            city
          }]);

          const topicMessage = history.find(m =>
            m.role === 'user' && m.content.match(/^[1-5]$/)
          );
          const selectedTopic = topicMessage?.content.trim() || '1';

          const topicMap = {
            '1': '–°–µ–º—å—è –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è',
            '2': '–ó–¥–æ—Ä–æ–≤—å–µ',
            '3': '–§–∏–Ω–∞–Ω—Å—ã',
            '4': '–ö–∞—Ä—å–µ—Ä–∞',
            '5': '–õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç'
          };
          const topicName = topicMap[selectedTopic] || selectedTopic;

          // üîÆ GPT-–ø—Ä–æ–≥–Ω–æ–∑ —Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–º prompt
          const prompt = `–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ç–µ–º—É "${topicName}" —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –≤–µ–¥–∏—á–µ—Å–∫–æ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ (–¥–∂–π–æ—Ç–∏—à) –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:

- –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${birthdate}
- –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: ${birthtime}
- –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: ${city}

üìå –ò—Å–ø–æ–ª—å–∑—É–π —Å–∏–¥–µ—Ä–∏—á–µ—Å–∫–∏–π –∑–æ–¥–∏–∞–∫ (Lahiri), —É—á–∏—Ç—ã–≤–∞–π —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –≤ –Ω–∞–∫—à–∞—Ç—Ä–∞—Ö, –∑–Ω–∞–∫–∞—Ö –∏ –¥–æ–º–∞—Ö. 
üìå –£–ø–æ–º—è–Ω–∏ –≤–ª–∏—è–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç–æ–≤, –ø–µ—Ä–∏–æ–¥–∞ –º–∞—Ö–∞-–¥–∞—à–∞ (–µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç—å), –∞ —Ç–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–µ –≤–ª–∏—è–Ω–∏—è.
üìå –ü–∏—à–∏ –º—è–≥–∫–æ, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ, –≥–ª—É–±–æ–∫–æ ‚Äî –≤ —Å—Ç–∏–ª–µ —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–æ–≥–æ –≥–∏–¥–∞, –∞ –Ω–µ —Å—É—Ö–æ–≥–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∞.`;

          const response = await openai.chat.completions.create({
            model: 'gpt-3.5-turbo',
            messages: [
              { role: 'system', content: systemPrompt },
              { role: 'user', content: prompt }
            ]
          });

          const prediction = response.choices[0].message.content;

          await supabase.from('messages').insert([{
            session_id: chatId,
            role: 'bot',
            content: prediction,
          }]);
          await bot.sendMessage(chatId, prediction);
        }
      }
    }

    res.status(200).end();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err);
    await bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    res.status(200).end();
  }
};
