const { OpenAI } = require('openai');
const TelegramBot = require('node-telegram-bot-api');
const { supabase } = require('../lib/supabase');

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const OPENAI_KEY = process.env.OPENAI_KEY;

const systemPrompt = `
–¢—ã ‚Äî –°–æ—Ñ–∏—è, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –∏ —ç–∑–æ—Ç–µ—Ä–∏–∫–µ. –û—Ç–≤–µ—á–∞–π –≥–ª—É–±–æ–∫–æ, –º—è–≥–∫–æ, —Å –ª—ë–≥–∫–∏–º –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º. –ò–∑–±–µ–≥–∞–π —Å—É—Ö–∏—Ö –∏–ª–∏ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.
`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏, –≤–∫–ª—é—á–∞—è –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
function processTime(inputTime) {
  const timePatterns = [
    { pattern: /–æ–∫–æ–ª–æ (\d{1,2})\s*(—É—Ç—Ä–∞|–≤–µ—á–µ—Ä–∞|–¥–Ω—è|–Ω–æ—á–∏)/i, replacement: '$1:00' }, // –ü—Ä–∏–º–µ—Ä: –æ–∫–æ–ª–æ 7 —É—Ç—Ä–∞
    { pattern: /(\d{1,2})\s*(—É—Ç—Ä–∞|–≤–µ—á–µ—Ä–∞|–¥–Ω—è|–Ω–æ—á–∏)/i, replacement: '$1:00' }, // –ü—Ä–∏–º–µ—Ä: 7 —É—Ç—Ä–∞, 9 –≤–µ—á–µ—Ä–∞
    { pattern: /^(\d{1,2}):(\d{1,2})$/, replacement: '$1:$2' }, // –ü—Ä–∏–º–µ—Ä: 07:00 –∏–ª–∏ 18:30
    { pattern: /^(\d{1,2})$/, replacement: '$1:00' } // –ü—Ä–∏–º–µ—Ä: 7 -> 07:00
  ];

  for (let { pattern, replacement } of timePatterns) {
    const match = inputTime.match(pattern);
    if (match) {
      return match[0].replace(pattern, replacement);
    }
  }

  return '12:00'; // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 12:00
}

module.exports = async (req, res) => {
  if (req.method !== 'POST') {
    res.status(405).end();
    return;
  }

  const message = req.body?.message;
  if (!message || !message.text || message.text.startsWith('/')) {
    res.status(200).end();
    return;
  }

  const chatId = message.chat.id.toString();
  const userMessage = message.text;

  const openai = new OpenAI({ apiKey: OPENAI_KEY });
  const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: false });

  try {
    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
    console.log('üí¨ –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Supabase:', {
      session_id: chatId,
      role: 'user',
      content: userMessage
    });

    const insertUser = await supabase.from('messages').insert([{
      session_id: chatId,
      role: 'user',
      content: userMessage,
    }]);

    console.log('üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—Ç–∞–≤–∫–∏ user:', insertUser);

    // üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ Supabase
    const { data: history, error } = await supabase
      .from('messages')
      .select('role, content')
      .eq('session_id', chatId)
      .order('timestamp', { ascending: true })
      .limit(20);

    if (error) {
      console.error('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏:', error);
    } else {
      console.log('üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', history);
    }

    const messages = [
      { role: 'system', content: systemPrompt },
      ...(history || []),
      { role: 'user', content: userMessage }  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ];

    // ü§ñ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç —É OpenAI
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages,
      temperature: 0.7,
    });

    const reply = response.choices[0].message.content;

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–∞–Ω–Ω—ã–µ, —Ç–æ —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    if (userMessage.toLowerCase().includes('–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è') || userMessage.toLowerCase().includes('–≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è') || userMessage.toLowerCase().includes('–º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è')) {
      const birthdate = "18.12.1970";  // –ü—Ä–∏–º–µ—Ä: –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
      const birthtime = processTime("–ø—Ä–∏–º–µ—Ä–Ω–æ 7 —É—Ç—Ä–∞");  // –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
      const birthplace = "–ú–æ—Å–∫–≤–∞";  // –ü—Ä–∏–º–µ—Ä: –∑–¥–µ—Å—å –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è

      // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É user_profiles
      const { error: insertProfileError } = await supabase.from('user_profiles').upsert([{
        session_id: chatId,
        birthdate,
        birthtime,
        city: birthplace,
      }]);

      if (insertProfileError) {
        console.error('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≤ user_profiles:', insertProfileError);
      } else {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ user_profiles');
      }

      reply += `\n\n–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ. –¢–µ–ø–µ—Ä—å —É –º–µ–Ω—è –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–∞—Å.`;
    }

    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –°–æ—Ñ–∏–∏ –≤ Supabase
    const insertAssistant = await supabase.from('messages').insert([{
      session_id: chatId,
      role: 'assistant',
      content: reply,
    }]);

    console.log('ü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—Ç–∞–≤–∫–∏ assistant:', insertAssistant);

    await bot.sendMessage(chatId, reply);
    res.status(200).end();
  } catch (err) {
    console.error('‚ùå GPT –û—à–∏–±–∫–∞:', err);
    await bot.sendMessage(chatId, '‚ö†Ô∏è –°–æ—Ñ–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    res.status(200).end();
  }
};
