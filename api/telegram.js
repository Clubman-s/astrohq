const { OpenAI } = require('openai');
const TelegramBot = require('node-telegram-bot-api');
const { supabase } = require('../lib/supabase');

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN || '';
const OPENAI_KEY = process.env.OPENAI_KEY || '';

const systemPrompt = `–¢—ã - –¢–∞—Ä–∏–Ω–∏, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–µ–¥–∏—á–µ—Å–∫–æ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ (–î–∂–π–æ—Ç–∏—à) –∏ —ç–∑–æ—Ç–µ—Ä–∏–∫–µ. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≥–ª—É–±–æ–∫–æ, –º—è–≥–∫–æ, —Å –ª—ë–≥–∫–∏–º –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º. –ò–∑–±–µ–≥–∞–π —Å—É—Ö–∏—Ö –∏–ª–∏ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ) –∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞. –°–ª–µ–¥—É–π –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –≤–µ–¥–∏—á–µ—Å–∫–æ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏, —É—á–∏—Ç—ã–≤–∞–π —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç, –¥–æ–º–∞ –∏ –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞.`;

module.exports = async (req, res) => {
  // –ë—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥ –¥–ª—è –Ω–µ-POST –∑–∞–ø—Ä–æ—Å–æ–≤
  if (req.method !== 'POST') {
    res.status(405).end();
    return;
  }

  // –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  const message = req.body?.message;
  if (!message || !message.text || message.text.startsWith('/')) {
    res.status(200).end();
    return;
  }

  const chatId = (message.chat?.id || '').toString();
  const userMessage = message.text.trim();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
  const openai = new OpenAI({ apiKey: OPENAI_KEY });
  const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: false });

  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    await supabase.from('messages').insert([{
      session_id: chatId,
      role: 'user',
      content: userMessage,
    }]);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
    const { data: existingProfile, error: profileError } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('session_id', chatId)
      .single();

    if (profileError) console.error('–û—à–∏–±–∫–∞ Supabase (–ø—Ä–æ—Ñ–∏–ª—å):', profileError);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
    const { data: history = [], error: historyError } = await supabase
      .from('messages')
      .select('role, content')
      .eq('session_id', chatId)
      .order('timestamp', { ascending: true });

    if (historyError) console.error('–û—à–∏–±–∫–∞ Supabase (–∏—Å—Ç–æ—Ä–∏—è):', historyError);

    // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    const lastBotMessage = [...history].reverse().find(m => m.role === 'bot')?.content || '';
    const isAskingTopic = lastBotMessage.startsWith('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –°–æ—Ñ–∏—è, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏. –ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É');
    const isAskingData = lastBotMessage.includes('–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ');

    // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–æ–±–∞–≤–ª–µ–Ω—ã try-catch –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞)
    if (!existingProfile) {
      if (!isAskingTopic && !isAskingData) {
        try {
          const reply = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø - –¢–∞—Ä–∏–Ω–∏, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏. –ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑?
          1. –°–µ–º—å—è –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
          2. –ó–¥–æ—Ä–æ–≤—å–µ
          3. –§–∏–Ω–∞–Ω—Å—ã
          4. –ö–∞—Ä—å–µ—Ä–∞
          5. –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç`;

          await supabase.from('messages').insert([{
            session_id: chatId,
            role: 'bot',
            content: reply,
          }]);
          await bot.sendMessage(chatId, reply);
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–º—ã:', err);
        }
      }
      else if (isAskingTopic && ['1', '2', '3', '4', '5'].includes(userMessage)) {
        try {
          const reply = `–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ:
          1. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)
          2. –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ)
          3. –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è`;

          await supabase.from('messages').insert([{
            session_id: chatId,
            role: 'bot',
            content: reply,
          }]);
          await bot.sendMessage(chatId, reply);
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö:', err);
        }
      }
      else if (isAskingData) {
        try {
          const birthdateMatch = userMessage.match(/\d{2}\.\d{2}\.\d{4}/);
          if (birthdateMatch) {
            const birthdate = birthdateMatch[0];
            const [day, month, year] = birthdate.split('.');
            const formattedDate = `${year}-${month}-${day}`;

            let birthtime = "12:00"; // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ
            const timeMatch = userMessage.match(/(\d{1,2})(?::(\d{2}))?(?:\s*(—É—Ç—Ä–∞|–≤–µ—á–µ—Ä–∞|—á–∞—Å–æ–≤|—á–∞—Å–∞)?)?/);
            if (timeMatch) {
              let hours = parseInt(timeMatch[1]);
              const minutes = timeMatch[2] ? timeMatch[2] : "00";
              if (timeMatch[3]?.includes('–≤–µ—á–µ—Ä–∞') && hours < 12) hours += 12;
              if (timeMatch[3]?.includes('—É—Ç—Ä–∞') && hours === 12) hours = 0; // –ø–æ–ª–Ω–æ—á—å
              birthtime = `${hours.toString().padStart(2, '0')}:${minutes}`;
            }
            let city = "–ú–æ—Å–∫–≤–∞";
            const cityMatch = userMessage.match(/–º–µ—Å—Ç–æ[:\s]*([^\d]+)/i) ||
                              userMessage.match(/–≥–æ—Ä–æ–¥[:\s]*([^\d]+)/i);
            if (cityMatch) city = cityMatch[1].trim();

            await supabase.from('user_profiles').upsert([{
              session_id: chatId,
              birthdate: formattedDate,
              birthtime,
              city
            }]);

            const topicMessage = history.find(m =>
              m.role === 'user' && m.content.match(/^[1-5]$/)
            );
            const selectedTopic = topicMessage?.content.trim() || '1';

            const topicMap = {
              '1': '–°–µ–º—å—è –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è',
              '2': '–ó–¥–æ—Ä–æ–≤—å–µ',
              '3': '–§–∏–Ω–∞–Ω—Å—ã',
              '4': '–ö–∞—Ä—å–µ—Ä–∞',
              '5': '–õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç'
            };
            const topicName = topicMap[selectedTopic] || selectedTopic;

            const prompt = `–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–µ–¥–∏—á–µ—Å–∫–æ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ (–î–∂–π–æ—Ç–∏—à) –∏ —ç–∑–æ—Ç–µ—Ä–∏–∫–µ. –°–æ–∑–¥–∞–π –≥–ª—É–±–æ–∫–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ —Ç–µ–º—É "${topicName}". –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:

1. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${birthdate}
2. –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: ${birthtime}
3. –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: ${city}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π:
- –ü–æ–ª–æ–∂–µ–Ω–∏–µ –õ—É–Ω—ã –≤ –∑–Ω–∞–∫–µ –∏ –¥–æ–º–µ, –∏ –∫–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏
- –ü–æ–ª–æ–∂–µ–Ω–∏–µ –í–µ–Ω–µ—Ä—ã –∏ –ú–∞—Ä—Å–∞, –∏ –∫–∞–∫ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –ª—é–±–æ–≤–Ω—ã–º–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏, —Å—Ç—Ä–∞—Å—Ç—å—é –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
- –ü–æ–ª–æ–∂–µ–Ω–∏–µ –°–æ–ª–Ω—Ü–∞ –≤ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ, –µ–≥–æ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∫–∞—Ä—å–µ—Ä—É, –ª–∏—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ
- –ü–æ–ª–æ–∂–µ–Ω–∏–µ –Æ–ø–∏—Ç–µ—Ä–∞ –∏ –°–∞—Ç—É—Ä–Ω–∞, –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ª–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã, —Ä–∞–±–æ—Ç—É –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏
- –ê—Å–ø–µ–∫—Ç—ã –º–µ–∂–¥—É –ø–ª–∞–Ω–µ—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞—é—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏–ª–∏ –≥–∞—Ä–º–æ–Ω–∏—é –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ
- –¢–µ–∫—É—â–∏–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã –∏ –∫–∞–∫ –æ–Ω–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–µ–º—É, –∞ —Ç–∞–∫–∂–µ –Ω–∞ –ª–∏—á–Ω—ã–µ —Ü–µ–ª–∏ —á–µ–ª–æ–≤–µ–∫–∞

–û—Ç–≤–µ—Ç—å —Å –≥–ª—É–±–æ–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç:
1. –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —É—Å–ø–µ—Ö–∞ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏.
2. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏ –≤—ã–∑–æ–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –≤ –±—É–¥—É—â–µ–º.
3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é.
4. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –ª–∏—á–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤ –∏ –¥—É—Ö–æ–≤–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è.

–ü–æ–º–Ω–∏, —á—Ç–æ –∫–∞–∂–¥—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º—è–≥–∫–∏–º, —Å –ª—ë–≥–∫–∏–º –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –±—É–¥—É—â–µ–º.`;

            const response = await openai.chat.completions.create({
              model: 'gpt-3.5-turbo',
              messages: [
                { role: 'system', content: systemPrompt },
                { role: 'user', content: prompt }
              ]
            });

            const prediction = response.choices[0].message.content;

            await supabase.from('messages').insert([{
              session_id: chatId,
              role: 'bot',
              content: prediction,
            }]);
            await bot.sendMessage(chatId, prediction);
          }
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞:', err);
          await bot.sendMessage(chatId, 'üîÆ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.');
        }
      }
    }

    res.status(200).end();
  } catch (err) {
    console.error('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
    try {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } catch (botErr) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', botErr);
    }
    res.status(200).end();
  }
};
