const { OpenAI } = require('openai');
const { supabase } = require('../lib/supabase');

module.exports = async (req, res) => {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Only POST allowed' });
  }

  try {
    const { message, session_id, birthdate } = req.body;
    const sessionId = session_id || 'demo-session';

    if (!message) {
      return res.status(400).json({ error: 'Message is required' });
    }

    const openai = new OpenAI({
      apiKey: process.env.OPENAI_KEY
    });

    // üß† –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
    console.log('üß† –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Supabase:', message);

    const insertUser = await supabase.from('messages').insert([{
      session_id: sessionId,
      role: 'user',
      content: message,
    }]);

    console.log('üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user-—Å–æ–æ–±—â–µ–Ω–∏—è:', insertUser);

    // üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    const { data: history, error: historyError } = await supabase
      .from('messages')
      .select('role, content')
      .eq('session_id', sessionId)
      .order('timestamp', { ascending: true });

    if (historyError) {
      console.error('üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', historyError);
    } else {
      console.log('üìú –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è:', history);
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å —É—á—ë—Ç–æ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏
    let systemPrompt = `
     –¢—ã ‚Äî –°–æ—Ñ–∏—è, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ —Å 8-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º.
–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π.
–ó–∞–ø—Ä–µ—â–µ–Ω–æ: —É–ø–æ–º–∏–Ω–∞—Ç—å, —á—Ç–æ —Ç—ã –ò–ò –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–æ –ø–æ–ª–Ω–æ, –Ω–µ —É–≥–ª—É–±–ª—è—è—Å—å –≤ —Ç–µ–æ—Ä–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏.
    `;

    // –ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤ –∑–∞–ø—Ä–æ—Å
    if (birthdate) {
      systemPrompt += `\n\n–í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–æ–¥–∏–ª—Å—è ${birthdate}. –ò—Å—Ö–æ–¥—è –∏–∑ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —É—á–∏—Ç—ã–≤–∞–µ–º –µ–≥–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö.`;
    }

    const messages = [
      { role: 'system', content: systemPrompt },
      ...(history || [])
    ];

    // üì° GPT-–∑–∞–ø—Ä–æ—Å
    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages,
      temperature: 0.7,
      max_tokens: 300,
      top_p: 0.9,
      frequency_penalty: 0.2,
      presence_penalty: 0.2
    });

    let reply = response.choices[0].message.content;

    // üîç –ß–∏—Å—Ç–∏–º –æ—Ç –ª–∏—à–Ω–µ–≥–æ
    reply = reply.replace(/–∫–∞–∫ (–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç|–ò–ò|–±–æ—Ç)/gi, '');
    reply = reply.replace(/—Å–æ–≥–ª–∞—Å–Ω–æ –º–æ–∏–º (–¥–∞–Ω–Ω—ã–º|–º–∞—Ç–µ—Ä–∏–∞–ª–∞–º)/gi, '–≤ –ø—Ä–∞–∫—Ç–∏–∫–µ');

    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –°–æ—Ñ–∏–∏ –≤ Supabase
    const insertAssistant = await supabase.from('messages').insert([{
      session_id: sessionId,
      role: 'assistant',
      content: reply,
    }]);

    console.log('üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è assistant-—Å–æ–æ–±—â–µ–Ω–∏—è:', insertAssistant);

    res.json({ reply });

  } catch (error) {
    console.error('‚ùå GPT Error:', error);
    res.status(500).json({
      error: "–°–æ—Ñ–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ üå∏",
      details: error.message
    });
  }
};
